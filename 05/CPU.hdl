// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];     	     // address of next instruction

    PARTS:
    // Put your code here:
	Not(in=instruction[15],out=Ainstruction);
	And(a=instruction[15],b=instruction[3],out=writeM);
	
	Mux16(a=ALUout,b=instruction,sel=Ainstruction,out=MUXout1);

	And(a=instruction[5], b=instruction[15], out=temp1);
	Or(a=temp1, b=Ainstruction, out=temp2);

	ARegister(in=MUXout1,load=temp2,out=ARegisterout,out[0..14]=addressM);

	Mux16(a=ARegisterout,b=inM,sel=instruction[12],out=MUXout2);
	
	And(a=instruction[4],b=instruction[15],out=Din);
	DRegister(in=ALUout,load=Din,out=DRegisterout);
	
	//alu
	ALU(x=DRegisterout,
		y=MUXout2,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		ng=ng,
		zr=zr,
		out=ALUout,
		out=outM);		
	//PC
		
	Not(in=zr, out=notzr);
 	Not(in=ng, out=notng);
	
 	And(a=notzr, b=notng, out=Jumptemp1);
 	And(a=instruction[0], b=Jumptemp1, out=JGT);
	
 	And(a=zr, b=instruction[1], out=JEQ);
 	Or(a=JEQ, b=JGT, out=Load1);

 	And(a=ng, b=instruction[2], out=JLT);
 	Or(a=JLT, b=Load1, out=Load2);
 	And(a=Load2, b=instruction[15], out=Load3);
		
 	PC(in=ARegisterout, load=Load3, inc=true, reset=reset,out[0..14]=pc);
}

